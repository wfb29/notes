#fastjson

##1 ThreadLocal

JDK举例为：

     public class SerialNum {
         // The next serial number to be assigned
         private static int nextSerialNum = 0;

         private static ThreadLocal serialNum = new ThreadLocal() {
             protected synchronized Object initialValue() {
                 return new Integer(nextSerialNum++);
             }
         };

         public static int get() {
             return ((Integer) (serialNum.get())).intValue();

         }
    }

另外看一个运用ThreadLocal来实现数据库连接Connection对象线程隔离的例子：

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
     
    public class ConnectionManager {
     
        private static ThreadLocal<Connection> connectionHolder = new ThreadLocal<Connection>() {
            @Override
            protected Connection initialValue() {
                Connection conn = null;
                try {
                    conn = DriverManager.getConnection(
                            "jdbc:mysql://localhost:3306/test", "username",
                            "password");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                return conn;
            }
        };
     
        public static Connection getConnection() {
            return connectionHolder.get();
        }
     
        public static void setConnection(Connection conn) {
            connectionHolder.set(conn);
        }
    }

##2 HashMap相关内容

- IdentityHashMap（JDK）
- HashMap
- IdentityHashMap（fastjson）

涉及知识点有：
- **引用相等性**与**对象相等性**
- factor因子的作用？取值范围。trick：设置一个较大的factor可以避免HashMap resize
- HashMap的数据结构。IdentityHashMap两个版本的对比，fastjson的实现为了避免resize可能会出现性能退化现象，为了减轻该种可能，设置了一个较大的初始值，这样会造成空间浪费。
- 线程安全，详细可见coolshell对于hashmap多线程访问时问题的分析。


##3 WeakReference与SoftReference

- WeakReference是弱引用，其中保存的对象实例可以被GC回收掉。这个类通常用于在某处保存对象引用，而又不干扰该对象被GC回收，通常用于Debug、内存监视工具等程序中。因为这类程序一般要求即要观察到对象，又不能影响该对象正常的GC过程。
最近在JDK的Proxy类的实现代码中也发现了Weakrefrence的应用，Proxy会把动态生成的Class实例暂存于一个由Weakrefrence构成的Map中作为Cache。

- SoftReference是强引用，它保存的对象实例，除非JVM即将OutOfMemory，否则不会被GC回收。这个特性使得它特别适合设计对象Cache。对于Cache，我们希望被缓存的对象最好始终常驻内存，但是如果JVM内存吃紧，为了不发生OutOfMemoryError导致系统崩溃，必要的时候也允许JVM回收Cache的内存，待后续合适的时机再把数据重新Load到Cache中。这样可以系统设计得更具弹性。

- PhantomReference是虚引用。虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。
虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。
ReferenceQueue queue = new ReferenceQueue ();
PhantomReference pr = new PhantomReference (object, queue);
程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动

    private final static ThreadLocal<SoftReference<char[]>> bufLocal = new ThreadLocal<SoftReference<char[]>>();

这句代码既实现了线程缓存，又避免了内存问题。

 
