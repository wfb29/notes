#模式与重构

##1 书的写作缘由

不能正确的使用模式。

通过重构实现模式、趋向模式、去除模式，而不是预先设计中使用模式，不过早的使用模式，避免过度设计

###过度设计
代码的灵活性超出所需

- 预计错误，则浪费时间和金钱
- 如果预期不会出现，那么产生冗余代码，维护困难
- 过度设计的代码会影响生产率

###模式万灵丹

>如果你手里只有一把锤子,你就会把所有的问题都看成钉子

###设计不足

**设计不足**比过度设计要常见的多，开发的软件设计不充分。

- 程序员受困于时间进度，没用时间进行重构
- 程序员在何为好的软件设计方面知识不足
- 被要求在既有系统中快速添加功能
- 被迫同时进行太多项目

两点：**进度**和**能力**

**后果：交付速度越来越慢，质量越来越差**

###测试驱动与持续重构

###重构与模式

>设计模式记录了许多重构产生的设计结构，...设计模式为重构提供了目标

>模式和重构之间存在着天然关系，模式想达到的目的地，而重构则是其他地方抵达这个目的地的条条道路。

###演进式设计

通过重构实现实现模式或者重构趋向于模式。

##2 重构

###何谓重构

重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。

去除重复、简化复杂逻辑、澄清模糊代码

###重构的动机

- 使新代码更易扩展
- 改善现有代码设计
- 更透彻的理解代码
- 提高编程趣味性

###众目睽睽

对代码而言，要得到最佳的重构结果，需要多人的帮助。

###代码可读性
###保持代码整洁
###循序渐进

一点点来，步子大了，容易扯着淡

###演进式设计

- 成立一个小组
- 用应用需求驱动框架
- 通过重构，持续改进应用和框架

###复合重构

**复合重构（composite refactoring）**是由多个低层次的重构组成的高层次重构。如提炼方法、上移方法、提炼类、搬移方法等。

###复合重构的优点

- 描述了重构顺序的完整计划
- 能够体现不明显的设计方向
- 促进对实现模式的深入思考

##3 模式

###何谓模式

每个模式都有三部分组成：表达的是某一场景下、一个问题以及解决问题的方案之前的关系。

###模式痴迷

**锤子和钉子**

####实现模式的方式不止一种

>每个模式都描述了在我们的环境中反复出现的问题，并进而叙述对这个问题的解决方案的要素，通过这种方式，能够反复应用洁净间方案，但是具体的实现方式又不相同。

John Vlissides
>模式的结构图仅仅是一个例子而已，并不是规范，对于这一点，似乎怎么强调都不过分。结构图只是描述了我们最经常见的部分的实现。因此它可能与自己的实现很多的相同点。但是两者的却别也在所难免。

###通过重构实现、趋向和去除模式

| 模式          | 重构实现      | 重构趋向      |重构去除  |
| ------------- |:-------------:|:-------------:| --------:|
| Adapter       | 提取Adapter作为统一接口|统一接口| |
| Builder       |用Builder封装Composite|  | |
| Collecting Parameter| 将聚集操作搬移到Colletion Parameter|| |
|Composed Method|组合方法 | | |
|composite | 用composite替换隐含树| |用Builder封装Composite |
|Creation Method | 用Creation Method替换构造函数 | | |
|Decorator | 将装饰功能搬移到Decorator| | |
|Fatory | 将创建知识移到Factory，用Factory封装类 | | |
|Interpretor | 用Interpretor替换隐式语言 | | |
|Iterator | | | 将隐式操作移到Visitor |
|Observer | 用Observer替换硬编码通知| | |
|Singleton | 用Singleton限制实例化| | 内联Singleton|
|State | 用State替换状态改变条件语句| | |
|Strategy | 用Strategy替换条件逻辑| | |
|Template Method| 形成Template Method| | |
|Visitor| 将聚集操作搬移到Visitor| | |

###模式是否会使代码更加复杂
通常，实现模式应该有助于去除重复代码、简化逻辑、说明意图和提高灵活性，但是，人民对模式的认识又对基于模式的重构起决定作用。有些模式会是的代码过分复杂，需要进一步重构。  

##4 代码坏味道



![代码坏味道](https://raw.githubusercontent.com/fbwang/notes/master/books/bookDetail/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93.jpeg)

基本类型的另外一种解决方案，是从fastjson里看到的泛型的用法，代码如下：
   
    public enum Feature {

    AutoCloseSource,

    AllowComment
    ;

    private Feature(){
        mask = (1 << ordinal());
    }

    private final int mask;

    public final int getMask() {
        return mask;
    }

    public static boolean isEnabled(int features, Feature feature) {
        return (features & feature.getMask()) != 0;
    }

    public static int config(int features, Feature feature, boolean state) {
        if (state) {
            features |= feature.getMask();
        } else {
            features &= ~feature.getMask();
        }

        return features;
    }
}

用JDK的ordinal方法和一个内置的成员变量mask来做配置数据用。
java.lang.Enum.ordinal()方法返回此枚举常量的序数（其枚举声明中的位置，其中初始常量分配的序数为零）。

###怪异的解决方案
指在同一系统中使用不同的方法解决同一类问题。

##6 创建

###6.1 Creation Method

用能够说明意图的Creation Method代替构造函数。
优点：
- 能够更好的表达所创建的实例的种类。
- 避免构造函数的局限，如两个函数的参数个数和类型不能相同。
- 更容易发现无意义的创建

缺点：
- 创建方式非标准化。有些类用的new实例化，用的Creation Method
 
思考:
相关构造函数私有化
相关类的构造函数私有化，统一提供构方（借用C++友元）...额，这是工厂


###6.2 将创建知识迁移到Factory

工厂方法模式  定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。

简单工厂模式  工厂为具体工厂，产品为抽象产品，由工厂实例创建产品实例。

抽象工厂模式  为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。

###6.3用Factory封装类
把类的构造函数声明为非公共的，通过Factory来创建他们的实例。

###6.4用Factory引入多态创建

###6.5用Builder封装Composite

通过Builder处理构造细节来简化构造过程。

- 简化了构造Compisite的客户代码
- 减少了创建composite的重复和容易出错的本性
- 在客户代码和composite之间实现了松耦合
- 允许对已封装的composite活复杂对象创建不同的表示
- 接口可能不会很清楚的表达意图（不太认同）

###6.6内联Singleton？？？？

##7 简化

###7.1 组合方法
提取小方法

###7.2 用strategy替换条件逻辑
策略模式

###7.3 将装饰功能迁移到Decorator
Java的流相关类的封装是Decorator的代表

###7.4 用State替换状态转换条件语句
###7.5 用Composite替换隐含树
###7.6 用Commond替换条件调度程序

##8 泛化
###8.1 形成Template Method
父类提供Template Method，子类实现变化

###8.2 提取Composite
提取一个实现该Composite的超类。
- 去除重复的类存储逻辑和处理逻辑
- 有效的表达类处理逻辑的可继承性

###8.3 用Composite替换一\多之分
###8.4 用Observer替换硬编码的通知
###8.5 通过Adapter统一接口
###8.6 提取Adapter
###8.7 用Interpreer替换隐式语言

##9 保护

###9.1 用类替换类型代码
###9.2 用Singleton限制实例化
###9.3 引入Null Object

##10 聚集操作
###10.1 聚集操作迁移到Collection parameter
Collection parameter是一个对象，将它传入不同的方法中，从方法中收集信息。
###10.2 聚集操作迁移到Visitor

visitor模式

##11实用重构
###11.1 链构造函数
###11.2 统一接口
###11.3 提取参数











