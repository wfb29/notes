#模式与重构

##1 书的写作缘由

不能正确的使用模式。

通过重构实现模式、趋向模式、去除模式，而不是预先设计中使用模式，不过早的使用模式，避免过度设计

###过度设计
代码的灵活性超出所需

- 预计错误，则浪费时间和金钱
- 如果预期不会出现，那么产生冗余代码，维护困难
- 过度设计的代码会影响生产率

###模式万灵丹

>如果你手里只有一把锤子,你就会把所有的问题都看成钉子

###设计不足

**设计不足**比过度设计要常见的多，开发的软件设计不充分。

- 程序员受困于时间进度，没用时间进行重构
- 程序员在何为好的软件设计方面知识不足
- 被要求在既有系统中快速添加功能
- 被迫同时进行太多项目

两点：**进度**和**能力**

**后果：交付速度越来越慢，质量越来越差**

###测试驱动与持续重构

###重构与模式

>设计模式记录了许多重构产生的设计结构，...设计模式为重构提供了目标

>模式和重构之间存在着天然关系，模式想达到的目的地，而重构则是其他地方抵达这个目的地的条条道路。

###演进式设计

通过重构实现实现模式或者重构趋向于模式。

##2 重构

###何谓重构

重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。

去除重复、简化复杂逻辑、澄清模糊代码

###重构的动机

- 使新代码更易扩展
- 改善现有代码设计
- 更透彻的理解代码
- 提高编程趣味性

###众目睽睽

对代码而言，要得到最佳的重构结果，需要多人的帮助。

###代码可读性
###保持代码整洁
###循序渐进

一点点来，步子大了，容易扯着淡

###演进式设计

- 成立一个小组
- 用应用需求驱动框架
- 通过重构，持续改进应用和框架

###复合重构

**复合重构（composite refactoring）**是由多个低层次的重构组成的高层次重构。如提炼方法、上移方法、提炼类、搬移方法等。

###复合重构的优点

- 描述了重构顺序的完整计划
- 能够体现不明显的设计方向
- 促进对实现模式的深入思考

##3 模式

###何谓模式

每个模式都有三部分组成：表达的是某一场景下、一个问题以及解决问题的方案之前的关系。

###模式痴迷

**锤子和钉子**










